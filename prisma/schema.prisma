generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String       @id @default(cuid())
  username               String
  email                  String       @unique
  emailVerified          DateTime?
  password               String
  image                  String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  accounts               Account[]
  receivedFriendRequests Friendship[] @relation("receivedRequests")
  sentFriendRequests     Friendship[] @relation("sentRequests")
  LoginToken             LoginToken[]
  sessions               Session[]
  UserItem               UserItem[]
  UserList               UserList[]
}

model LoginToken {
  id        String   @unique @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  redirect  String   @default("/")
  user      User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserItem {
  id            String   @id @default(cuid())
  title         String
  createdAt     DateTime @default(now())
  userId        String
  listId        String
  archive       String?  @default("undefined")
  currentRank   Int      @default(0)
  potentialRank Int      @default(0)
  album         String?
  artist        String?
  genre         String?
  label         String?
  year          Int?
  userList      UserList @relation(fields: [listId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model UserList {
  id               String     @id @default(cuid())
  title            String?
  createdAt        DateTime   @default(now())
  userId           String
  archive          String?    @default("undefined")
  parentListId     String?    @default("undefined")
  parentListUserId String?    @default("undefined")
  category         String?    @default("undefined")
  UserItem         UserItem[]
  user             User       @relation(fields: [userId], references: [id])
}

model Friendship {
  senderId   String
  receiverId String
  status     String
  id         String @id @default(cuid())
  receiver   User   @relation("receivedRequests", fields: [receiverId], references: [id])
  sender     User   @relation("sentRequests", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
}
